openapi: 3.0.0
info:
  title: SCIM 2.0 API
  description: System for Cross-domain Identity Management (SCIM) 2.0 API with Microsoft Entra ID integration
  version: 1.0.0
  contact:
    name: SCIM Server Admin
servers:
  - url: http://localhost:8000
    description: Local development server

components:
  securitySchemes:
    sessionAuth:
      type: apiKey
      in: cookie
      name: session
      description: Session cookie from successful Microsoft Entra ID authentication

  schemas:
    Meta:
      type: object
      properties:
        resourceType:
          type: string
          example: "User"
        created:
          type: string
          format: date-time
        lastModified:
          type: string
          format: date-time
        location:
          type: string
          format: uri
        version:
          type: string

    Name:
      type: object
      properties:
        formatted:
          type: string
          description: The full name, including all middle names, titles, and suffixes
          example: "Ms. Barbara J Jensen, III"
        familyName:
          type: string
          description: The family name of the User
          example: "Jensen"
        givenName:
          type: string
          description: The given name of the User
          example: "Barbara"
        middleName:
          type: string
          description: The middle name(s) of the User
          example: "Jane"
        honorificPrefix:
          type: string
          description: The honorific prefix(es) of the User
          example: "Ms."
        honorificSuffix:
          type: string
          description: The honorific suffix(es) of the User
          example: "III"

    Email:
      type: object
      properties:
        value:
          type: string
          format: email
          description: Email address
          example: "bjensen@example.com"
        display:
          type: string
          description: A human-readable name
          example: "Barbara J Jensen"
        type:
          type: string
          description: A label indicating the attribute's function
          example: "work"
        primary:
          type: boolean
          description: A Boolean value indicating the 'primary' or preferred attribute value
          example: true

    PhoneNumber:
      type: object
      properties:
        value:
          type: string
          description: Phone number
          example: "555-555-5555"
        display:
          type: string
          description: A human-readable name
          example: "Work Phone"
        type:
          type: string
          description: A label indicating the attribute's function
          example: "work"
        primary:
          type: boolean
          description: A Boolean value indicating the 'primary' or preferred attribute value
          example: true

    Address:
      type: object
      properties:
        formatted:
          type: string
          description: The full mailing address
          example: "100 Universal City Plaza\nHollywood, CA 91608 USA"
        streetAddress:
          type: string
          description: The street address component
          example: "100 Universal City Plaza"
        locality:
          type: string
          description: The city or locality component
          example: "Hollywood"
        region:
          type: string
          description: The state or region component
          example: "CA"
        postalCode:
          type: string
          description: The zip code or postal code component
          example: "91608"
        country:
          type: string
          description: The country name component
          example: "USA"
        type:
          type: string
          description: A label indicating the attribute's function
          example: "work"
        primary:
          type: boolean
          description: A Boolean value indicating the 'primary' or preferred attribute value
          example: true

    Member:
      type: object
      properties:
        value:
          type: string
          description: Identifier of the member
          example: "2819c223-7f76-453a-919d-413861904646"
        display:
          type: string
          description: A human-readable name
          example: "John Doe"
        type:
          type: string
          description: A label indicating the attribute's function
        $ref:
          type: string
          description: The URI of the corresponding resource
          example: "../Users/2819c223-7f76-453a-919d-413861904646"

    User:
      type: object
      required:
        - schemas
        - userName
      properties:
        schemas:
          type: array
          items:
            type: string
          example: ["urn:ietf:params:scim:schemas:core:2.0:User"]
        id:
          type: string
          description: Unique identifier for the User
          example: "2819c223-7f76-453a-919d-413861904646"
        externalId:
          type: string
          description: Identifier for the User defined by the provisioning client
          example: "user123"
        meta:
          $ref: '#/components/schemas/Meta'
        userName:
          type: string
          description: Unique identifier for the User, typically used by the user to directly authenticate
          example: "bjensen@example.com"
        name:
          $ref: '#/components/schemas/Name'
        displayName:
          type: string
          description: The name of the User, suitable for display to end-users
          example: "Barbara J Jensen"
        nickName:
          type: string
          description: The casual way to address the user in real life
          example: "Babs"
        profileUrl:
          type: string
          format: uri
          description: A fully qualified URL pointing to a page representing the User's online profile
          example: "https://login.example.com/bjensen"
        title:
          type: string
          description: The user's title
          example: "Vice President"
        userType:
          type: string
          description: Used to identify the relationship between the organization and the user
          example: "Employee"
        preferredLanguage:
          type: string
          description: Indicates the User's preferred written or spoken language
          example: "en-US"
        locale:
          type: string
          description: Used to indicate the User's default location
          example: "en-US"
        timezone:
          type: string
          description: The User's time zone
          example: "America/Los_Angeles"
        active:
          type: boolean
          description: A Boolean value indicating the User's administrative status
          example: true
        emails:
          type: array
          items:
            $ref: '#/components/schemas/Email'
        phoneNumbers:
          type: array
          items:
            $ref: '#/components/schemas/PhoneNumber'
        addresses:
          type: array
          items:
            $ref: '#/components/schemas/Address'

    Group:
      type: object
      required:
        - schemas
        - displayName
      properties:
        schemas:
          type: array
          items:
            type: string
          example: ["urn:ietf:params:scim:schemas:core:2.0:Group"]
        id:
          type: string
          description: Unique identifier for the Group
          example: "e9e30dba-f08f-4109-8486-d5c6a331660a"
        externalId:
          type: string
          description: Identifier for the Group defined by the provisioning client
          example: "group123"
        meta:
          $ref: '#/components/schemas/Meta'
        displayName:
          type: string
          description: A human-readable name for the Group
          example: "Employees"
        members:
          type: array
          items:
            $ref: '#/components/schemas/Member'

    UserListResponse:
      type: object
      properties:
        schemas:
          type: array
          items:
            type: string
          example: ["urn:ietf:params:scim:api:messages:2.0:ListResponse"]
        totalResults:
          type: integer
          description: The total number of results
          example: 10
        startIndex:
          type: integer
          description: The 1-based index of the first result in the current set of results
          example: 1
        itemsPerPage:
          type: integer
          description: The number of resources returned in a list response page
          example: 100
        Resources:
          type: array
          items:
            $ref: '#/components/schemas/User'

    GroupListResponse:
      type: object
      properties:
        schemas:
          type: array
          items:
            type: string
          example: ["urn:ietf:params:scim:api:messages:2.0:ListResponse"]
        totalResults:
          type: integer
          description: The total number of results
          example: 10
        startIndex:
          type: integer
          description: The 1-based index of the first result in the current set of results
          example: 1
        itemsPerPage:
          type: integer
          description: The number of resources returned in a list response page
          example: 100
        Resources:
          type: array
          items:
            $ref: '#/components/schemas/Group'

    Error:
      type: object
      properties:
        schemas:
          type: array
          items:
            type: string
          example: ["urn:ietf:params:scim:api:messages:2.0:Error"]
        status:
          type: string
          description: HTTP status code
          example: "400"
        detail:
          type: string
          description: A detailed human-readable message
          example: "Request is unparsable, syntactically incorrect, or violates schema."
        scimType:
          type: string
          description: A SCIM detail error keyword
          example: "invalidSyntax"

paths:
  /scim/v2/Users:
    get:
      summary: Get users
      description: Retrieve a list of users with optional filtering and pagination
      tags:
        - Users
      parameters:
        - name: filter
          in: query
          description: Filter string for SCIM filtering
          required: false
          schema:
            type: string
          example: "userName eq \"bjensen@example.com\""
        - name: startIndex
          in: query
          description: The 1-based index of the first result
          required: false
          schema:
            type: integer
            default: 1
          example: 1
        - name: count
          in: query
          description: The maximum number of results to return
          required: false
          schema:
            type: integer
            default: 100
          example: 100
      security:
        - sessionAuth: []
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserListResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create user
      description: Create a new user
      tags:
        - Users
      security:
        - sessionAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /scim/v2/Users/{user_id}:
    get:
      summary: Get user
      description: Retrieve a specific user by ID
      tags:
        - Users
      parameters:
        - name: user_id
          in: path
          description: User ID
          required: true
          schema:
            type: string
          example: "2819c223-7f76-453a-919d-413861904646"
      security:
        - sessionAuth: []
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Replace user
      description: Replace all user attributes
      tags:
        - Users
      parameters:
        - name: user_id
          in: path
          description: User ID
          required: true
          schema:
            type: string
          example: "2819c223-7f76-453a-919d-413861904646"
      security:
        - sessionAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      summary: Update user
      description: Update specific user attributes
      tags:
        - Users
      parameters:
        - name: user_id
          in: path
          description: User ID
          required: true
          schema:
            type: string
          example: "2819c223-7f76-453a-919d-413861904646"
      security:
        - sessionAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete user
      description: Delete a user
      tags:
        - Users
      parameters:
        - name: user_id
          in: path
          description: User ID
          required: true
          schema:
            type: string
          example: "2819c223-7f76-453a-919d-413861904646"
      security:
        - sessionAuth: []
      responses:
        '204':
          description: No content
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /scim/v2/Groups:
    get:
      summary: Get groups
      description: Retrieve a list of groups with optional filtering and pagination
      tags:
        - Groups
      parameters:
        - name: filter
          in: query
          description: Filter string for SCIM filtering
          required: false
          schema:
            type: string
          example: "displayName eq \"Employees\""
        - name: startIndex
          in: query
          description: The 1-based index of the first result
          required: false
          schema:
            type: integer
            default: 1
          example: 1
        - name: count
          in: query
          description: The maximum number of results to return
          required: false
          schema:
            type: integer
            default: 100
          example: 100
      security:
        - sessionAuth: []
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupListResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create group
      description: Create a new group
      tags:
        - Groups
      security:
        - sessionAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Group'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /scim/v2/Groups/{group_id}:
    get:
      summary: Get group
      description: Retrieve a specific group by ID
      tags:
        - Groups
      parameters:
        - name: group_id
          in: path
          description: Group ID
          required: true
          schema:
            type: string
          example: "e9e30dba-f08f-4109-8486-d5c6a331660a"
      security:
        - sessionAuth: []
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        '404':
          description: Group not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Replace group
      description: Replace all group attributes
      tags:
        - Groups
      parameters:
        - name: group_id
          in: path
          description: Group ID
          required: true
          schema:
            type: string
          example: "e9e30dba-f08f-4109-8486-d5c6a331660a"
      security:
        - sessionAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Group'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Group not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      summary: Update group
      description: Update specific group attributes
      tags:
        - Groups
      parameters:
        - name: group_id
          in: path
          description: Group ID
          required: true
          schema:
            type: string
          example: "e9e30dba-f08f-4109-8486-d5c6a331660a"
      security:
        - sessionAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Group not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete group
      description: Delete a group
      tags:
        - Groups
      parameters:
        - name: group_id
          in: path
          description: Group ID
          required: true
          schema:
            type: string
          example: "e9e30dba-f08f-4109-8486-d5c6a331660a"
      security:
        - sessionAuth: []
      responses:
        '204':
          description: No content
        '404':
          description: Group not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /login:
    get:
      summary: Login with Microsoft Entra ID
      description: Redirect to Microsoft Entra ID login page
      tags:
        - Authentication
      responses:
        '302':
          description: Redirect to Microsoft Entra ID login page

  /auth/callback:
    get:
      summary: Authentication callback
      description: Handle callback from Microsoft Entra ID after successful authentication
      tags:
        - Authentication
      parameters:
        - name: code
          in: query
          description: Authorization code
          required: true
          schema:
            type: string
      responses:
        '302':
          description: Redirect to home page on successful authentication
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /logout:
    get:
      summary: Logout
      description: Log out and clear session
      tags:
        - Authentication
      responses:
        '302':
          description: Redirect to home page after logout

  /:
    get:
      summary: Home page
      description: Home page that requires authentication
      tags:
        - Authentication
      security:
        - sessionAuth: []
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "SCIM Server is running"
                  user:
                    type: string
                    example: "John Doe"
                  scim_endpoints:
                    type: object
                    properties:
                      users:
                        type: string
                        example: "/scim/v2/Users"
                      groups:
                        type: string
                        example: "/scim/v2/Groups"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /health:
    get:
      summary: Health check
      description: Health check endpoint
      tags:
        - System
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "ok"
